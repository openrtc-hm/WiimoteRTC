WiimoteRTC - 日本語
=======================


はじめに
========

クラスについては、 `APIドキュメンテーション`_ に参照してください。

.. _`APIドキュメンテーション`:
   doxygen/html/index.html

条件
====

WiimoteRTCはOpenRTM-aist 1.0.0以上のC++版が必要です。

WiimoteRTCは CMake_ を使います。CMake 2.8以上が必要です。

.. _CMAke:
   http://www.cmake.org

インストール
============

インストーラ
------------

Windowsのユーザはインストーラパッケージを使用してコンポーネントをインストール
することができます。これはコンポーネント及びそのすべての必要なライブラリを
インストールします。Windowsでインストールする場合、インストーラの使用を推奨してます。

- インストーラをダウンロードしてください。
- インストールを始めるためにインストーラをダブルクリックしてください。
- 指示にしたがってコンポーネントをインストールしてください。
- 環境変数の変更を適用するため、コンポーネントを使用する前にコンピューターを
  再起動する必要があるかもしれません。

WiimoteRTCは ``WiimoteRTCComp`` の実行をダブルクリックして実行することが
できます。あるいは、 ``WiimoteRTC`` を初期化関数の ``WiimoteRTCInit`` を利用して、
マネージャにロードすることができます。

ソースから
----------

ソースを使う場合は以下の手順でインストールしてください。

- ソースをダウンロードして解凍してください::

    tar -xvzf WiimoteRTC-1.0.0.tar.gz

- 解凍されたフォルダに入ってください::

    cd WiimoteRTC-1.0.0

- ``build`` フォルダを作ってください::

    mkdir build

- `` build`` フォルダに入ってください::

    cd build

- CMakeを実行してください::

    cmake ../

- エラーが出無い場合、makeを実行してください::

    make

- ``make install`` でコンポーネントをインストールしてください。選択された
  インストール場所に書き込み権限があるかを確認してください::

  ``make install``

- インストールする場所はccmakeを実行して ``CMAKE_INSTALL_PREFIX`` を
  設定することで変更が可能です。

    ccmake ../

ここまでで、コンポーネントが使えるようになりました。コンフィグレーションは次のセクションを
参照してください。

WiimoteRTCは ``WiimoteRTCComp`` を実行（ ``${prefix}/components/bin`` に
インストールされます）することでスタンドアローンモードで実行することができます。
あるいは、 ``libWiimoteRTC.so`` を初期化関数の ``WiimoteRTCInit`` を利用して、
マネージャにロードすることができます。このライブラリは ``${prefix}/components/lib`` 
または ``${prefix}/components/lib64`` にインストールされます。


コンフィグレーション
====================

使えるコンフィグレーションパラメータは以下のテーブルを参照
してください。

================ ================== ================ ====
パラメータ       データ型           デフォルト値     意味
================ ================== ================ ====
debug            bool               0                コンソール画面に整形データを表示するConfiguration。
SIU_compati      bool               0                芝浦工大学が開発したWiiRemoteComponentsに互換性のあるデータを送信するConfiguration。
ClassicController bool               0                wiiClassicControllerの情報を取得・送信するConfiguration。
Nunchuk          bool               0                wiiNunchukの情報を取得・送信するConfiguration。
MotionPlus       bool               0                wiiMotionPlusの情報を取得・送信するConfiguration。
BalanceBoard     bool               0                wiiBalanceBoardの情報を取得・送信するConfiguration。
LED              string             ""               wiiRemoteリモコンのLEDの点灯を設定するConfiguration。
Rumble           bool               0                wiiRemoteリモコンの振動を設定するConfiguration。
================ ================== ================ ====

ポート
======

コンポーネントによって提供されるポートは以下のテーブルで述べられています。

=============== =========== ============================== ====
ポート名        ポート型    データ型                       意味
=============== =========== ============================== ====
command         InPort      RTC::TimedOctet                WiiコントローラのLEDと振動を制御するコマンドデータを受信する。<br/>上位4ビットでLEDの点灯パターン、最下位1ビットで振動を操作する。
WiiRemote       OutPort     RTC::TimedShortSeq             WiiRemoteコントローラから取得したデータを送信する。<br/><br/>[0] 十字キー・上ボタンの状態(BOOL 値)<br/>[1] 十字キー・右ボタンの状態(BOOL 値)<br/>[2] 十字キー・下ボタンの状態(BOOL 値)<br/>[3] 十字キー・左ボタンの状態(BOOL 値)<br/>[4] A ボタンの状態(BOOL 値)<br/>[5] B ボタンの状態(BOOL 値)<br/>[6] ＋ボタンの状態(BOOL 値)<br/>[7] Home ボタンの状態(BOOL 値)<br/>[8] －ボタンの状態(BOOL 値)<br/>[9] 1 ボタンの状態(BOOL 値)<br/>[10] 2 ボタンの状態(BOOL 値)<br/>[11] X軸方向の加速度<br/>[12] Y軸方向の加速度<br/>[13] Z軸方向の加速度<br/>[14] pitchのデータ<br/>[15] rollのデータ<br/>[16] バッテリー残量(%) <br/>[17] LEDの状態（BYTE値）<br/><br/>※コンフィギュレーションの"SIU_compti"が”true"の場合、[0]~[13]のデータを送信する。
WiiNunchuk      OutPort     RTC::TimedShortSeq             WiiNunchukコントローラから取得したデータを送信する。<br/>尚、[0]から[13]までがWiiリモコン本体の情報、それ以降はWiiNunchukの情報となっている。<br/><br/>[0] 十字キー・上ボタンの状態(BOOL 値)<br/>[1] 十字キー・右ボタンの状態(BOOL 値)<br/>[2] 十字キー・下ボタンの状態(BOOL 値)<br/>[3] 十字キー・左ボタンの状態(BOOL 値)<br/>[4] A ボタンの状態(BOOL 値)<br/>[5] B ボタンの状態(BOOL 値)<br/>[6] ＋ボタンの状態(BOOL 値)<br/>[7] Home ボタンの状態(BOOL 値)<br/>[8] －ボタンの状態(BOOL 値)<br/>[9] 1 ボタンの状態(BOOL 値)<br/>[10] 2 ボタンの状態(BOOL 値)<br/>[11] X軸方向の加速度<br/>[12] Y軸方向の加速度<br/>[13] Z軸方向の加速度<br/>[14] C ボタンの状態(BOOL 値)<br/>[15] Z ボタンの状態(BOOL 値)<br/>[16] アナログスティックのX 方向入力値<br/>(解放時0，最大まで左に傾けると-100，同右で100)<br/>[17] アナログスティックのY 方向入力値<br/>(解放時0，最大まで左に傾けると-100，同右で100)<br/>[18] X軸方向の加速度<br/>[19] Y軸方向の加速度<br/>[20] Z軸方向の加速度<br/>[21] バッテリー残量(%) <br/>[22] LEDの状態（BYTE値）<br/><br/>※コンフィギュレーションの"SIU_compti"が"true"の場合、[0]~[21]のデータを送信する。
WiiClassicC     OutPort     RTC::TimedShortSeq             WiiClassic Controllerから取得したデータを送信する。<br/>尚、[0]から[13]までがWiiリモコン本体の情報、それ以降はWiiClassicControllerの情報となっている。<br/><br/>[0] 十字キー・上ボタンの状態(BOOL 値)<br/>[1] 十字キー・右ボタンの状態(BOOL 値)<br/>[2] 十字キー・下ボタンの状態(BOOL 値)<br/>[3] 十字キー・左ボタンの状態(BOOL 値)<br/>[4] A ボタンの状態(BOOL 値)<br/>[5] B ボタンの状態(BOOL 値)<br/>[6] ＋ボタンの状態(BOOL 値)<br/>[7] Home ボタンの状態(BOOL 値)<br/>[8] －ボタンの状態(BOOL 値)<br/>[9] 1 ボタンの状態(BOOL 値)<br/>[10] 2 ボタンの状態(BOOL 値)<br/>[11] X軸方向の加速度<br/>[12] Y軸方向の加速度<br/>[13] Z軸方向の加速度<br/>[14] A ボタンの状態(BOOL 値)<br/>[15] B ボタンの状態(BOOL 値)<br/>[16] X ボタンの状態(BOOL 値)<br/>[17] Y ボタンの状態(BOOL 値)<br/>[18] －ボタンの状態(BOOL 値)<br/>[19] Home ボタンの状態(BOOL 値)<br/>[20] ＋ボタンの状態(BOOL 値)<br/>[21] 十字キー・上ボタンの状態(BOOL 値)<br/>[22] 十字キー・下ボタンの状態(BOOL 値)<br/>[23] 十字キー・左ボタンの状態(BOOL 値)<br/>[24] 十字キー・右ボタンの状態(BOOL 値)<br/>[25] L ボタンの状態(BOOL 値)<br/>[26] R ボタンの状態(BOOL 値)<br/>[27] ZL ボタンの状態(BOOL 値)<br/>[28] ZR ボタンの状態(BOOL 値)<br/>[29] L ボタンのアナログ入力値<br/>　(最小値0，最大値100，PRO の場合は解放で0，押下で100)<br/>[30] R ボタンのアナログ入力値<br/>　(最小値0，最大値100，PRO の場合は解放で0，押下で100)<br/>[31] 左アナログスティックのX 方向入力値<br/>　(解放時0，最大まで左に傾けると-100，同右で100)<br/>[32] 左アナログスティックのY 方向入力値<br/>　(解放時0，最大まで下に傾けると-100，同上で100)<br/>[33] 右アナログスティックのX 方向入力値(-100～100)<br/>　(解放時0，最大まで左に傾けると-100，同右で100)<br/>[34] 右アナログスティックのY 方向入力値(-100～100)<br/>　(解放時0，最大まで下に傾けると-100，同上で100)<br/>[35] バッテリー残量(%) <br/>[36] LEDの状態（BYTE値）<br/><br/>※コンフィギュレーションの"SIU_compti"が"true"の場合、[0]~[36]のデータを送信する。
WiiBalanceB     OutPort     RTC::TimedShortSeq             WiiBalanceBoardから取得したデータを送信する。<br/><br/>[0] 電源ボタンの状態(BOOL 値)<br/>[1] X軸の重心座標<br/>[2] Y軸の重心座標<br/>[3] 左上にかかる重量データ<br/>[4] 右上にかかる重量データ<br/>[5] 右下にかかる重量データ<br/>[6] 左下にかかる重量データ<br/>[7] 左上センサの生データ<br/>[8] 右上センサの生データ<br/>[9] 右下センサの生データ<br/>[10] 左下センサの生データ<br/>[11] バッテリー残量(%) <br/>[12] LEDの状態（BYTE値）<br/><br/>※コンフィギュレーションの"SIU_compti"が"true"の場合、[0]~[12]のデータを送信する。
WiiMotionP      OutPort     RTC::TimedShortSeq             WiiMotionPlusコントローラから取得したデータを送信する。<br/>尚、[0]から[13]までがWiiリモコン本体の情報、それ以降はWiiMotionPlusの情報となっている。<br/><br/>[0] 十字キー・上ボタンの状態(BOOL 値)<br/>[1] 十字キー・右ボタンの状態(BOOL 値)<br/>[2] 十字キー・下ボタンの状態(BOOL 値)<br/>[3] 十字キー・左ボタンの状態(BOOL 値)<br/>[4] A ボタンの状態(BOOL 値)<br/>[5] B ボタンの状態(BOOL 値)<br/>[6] ＋ボタンの状態(BOOL 値)<br/>[7] Home ボタンの状態(BOOL 値)<br/>[8] －ボタンの状態(BOOL 値)<br/>[9] 1 ボタンの状態(BOOL 値)<br/>[10] 2 ボタンの状態(BOOL 値)<br/>[11] X軸方向の加速度<br/>[12] Y軸方向の加速度<br/>[13] Z軸方向の加速度<br/>[14] MotionPlus のyaw の生データ<br/>[15] MotionPlus のpitch の生データ<br/>[16] MotionPlus のroll の生データ<br/>[17] MotionPlus のyaw を速度に変換した値<br/>[18] MotionPlus のpitch を速度に変換した値<br/>[19] MotionPlus のroll を速度に変換した値<br/>[20] バッテリー残量(%) <br/>[21] LEDの状態<br/><br/>※コンフィギュレーションの"SIU_compti"が"true"の場合、[0]~[19]のデータを送信する。
=============== =========== ============================== ====

例
==

例のrtc.confファイルは ``${prefix}/components/share/WiimoteRTC/examples/conf/``
フォルダにインストールされています。

Changelog
=========


License
=======

このソフトウェアは産業技術総合研究所で開発されています。承認番号はH23PRO-????
です。このソフトウェアは Lesser General Public License (LGPL) ライセンスとして
公開されてます。COPYING.LESSER を参照してください。

